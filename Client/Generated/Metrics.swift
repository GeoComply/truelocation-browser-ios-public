// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser. DO NOT EDIT. DO NOT COMMIT.

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */



import Glean

// swiftlint:disable superfluous_disable_command
// swiftlint:disable nesting
// swiftlint:disable line_length
// swiftlint:disable identifier_name
// swiftlint:disable force_try

extension GleanMetrics {
    class GleanBuild {
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        public static let info = BuildInfo(buildDate: DateComponents(calendar: Calendar.current, timeZone: TimeZone(abbreviation: "UTC"), year: 2023, month: 3, day: 28, hour: 7, minute: 10, second: 6))
    }

    enum AppMenu {
        /// Counts the number of times a user taps Library in the app menu
        static let library = CounterMetricType( // generated from app_menu.library
            category: "app_menu",
            name: "library",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Home in the app menu
        static let home = CounterMetricType( // generated from app_menu.home
            category: "app_menu",
            name: "home",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user enables Block Images
        /// in the app menu
        static let blockImagesEnabled = CounterMetricType( // generated from app_menu.block_images_enabled
            category: "app_menu",
            name: "block_images_enabled",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user disables Block Images
        /// in the app menu
        static let blockImagesDisabled = CounterMetricType( // generated from app_menu.block_images_disabled
            category: "app_menu",
            name: "block_images_disabled",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Enable Night Mode
        /// in the app menu
        static let nightModeEnabled = CounterMetricType( // generated from app_menu.night_mode_enabled
            category: "app_menu",
            name: "night_mode_enabled",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Disable Night Mode
        /// in the app menu
        static let nightModeDisabled = CounterMetricType( // generated from app_menu.night_mode_disabled
            category: "app_menu",
            name: "night_mode_disabled",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps What's New in the app menu
        static let whatsNew = CounterMetricType( // generated from app_menu.whats_new
            category: "app_menu",
            name: "whats_new",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Settings in the app menu
        static let settings = CounterMetricType( // generated from app_menu.settings
            category: "app_menu",
            name: "settings",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Logins & Passwords
        /// in the app menu
        static let logins = CounterMetricType( // generated from app_menu.logins
            category: "app_menu",
            name: "logins",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Sign Into Sync
        /// in the app menu
        static let signIntoSync = CounterMetricType( // generated from app_menu.sign_into_sync
            category: "app_menu",
            name: "sign_into_sync",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum ApplicationServices {
        /// Measures the state of the show Pocket stories preference.
        static let pocketStoriesVisible = BooleanMetricType( // generated from application_services.pocket_stories_visible
            category: "application_services",
            name: "pocket_stories_visible",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum Bookmarks {
        private static let viewListLabel = CounterMetricType( // generated from bookmarks.view_list
            category: "bookmarks",
            name: "view_list",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times the bookmarks list is opened
        /// from either the Home Panel tab button or the App Menu.
        static let viewList = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.view_list
            category: "bookmarks",
            name: "view_list",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: viewListLabel,
            labels: ["app-menu"]
        )

        private static let addLabel = CounterMetricType( // generated from bookmarks.add
            category: "bookmarks",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a bookmark is added from the
        /// following:
        /// * Page Action Menu
        /// * Share Menu
        static let add = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.add
            category: "bookmarks",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: addLabel,
            labels: ["activity-stream", "page-action-menu", "share-menu"]
        )

        private static let deleteLabel = CounterMetricType( // generated from bookmarks.delete
            category: "bookmarks",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a bookmark is deleted from
        /// the following:
        /// * Page Action Menu
        /// * Activity Stream
        /// * Bookmarks Panel
        static let delete = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.delete
            category: "bookmarks",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: deleteLabel,
            labels: ["activity-stream", "bookmarks-panel", "page-action-menu"]
        )

        private static let editLabel = CounterMetricType( // generated from bookmarks.edit
            category: "bookmarks",
            name: "edit",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a bookmark is tapped to
        /// be edited from:
        /// * Add bookmark toast Edit button
        /// * Bookmarks panel edit bookmarks view
        static let edit = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.edit
            category: "bookmarks",
            name: "edit",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: editLabel,
            labels: ["add-bookmark-toast", "bookmarks-panel"]
        )

        private static let openLabel = CounterMetricType( // generated from bookmarks.open
            category: "bookmarks",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a bookmark is opened from
        /// the following:
        /// * Awesomebar results
        /// * Bookmarks Panel
        static let open = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.open
            category: "bookmarks",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: openLabel,
            labels: ["awesomebar-results", "bookmarks-panel"]
        )

    }

    enum DefaultBrowserCard {
        /// Counts the number of times default browser card is dismissed.
        static let dismissPressed = CounterMetricType( // generated from default_browser_card.dismiss_pressed
            category: "default_browser_card",
            name: "dismiss_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times the Go To Settings button on
        /// default browser card is clicked.
        static let goToSettingsPressed = CounterMetricType( // generated from default_browser_card.go_to_settings_pressed
            category: "default_browser_card",
            name: "go_to_settings_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum DefaultBrowserOnboarding {
        /// Counts the number of times default browser onboarding is dismissed.
        static let dismissPressed = CounterMetricType( // generated from default_browser_onboarding.dismiss_pressed
            category: "default_browser_onboarding",
            name: "dismiss_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times the Go To Settings button on
        /// default browser onboarding is clicked.
        static let goToSettingsPressed = CounterMetricType( // generated from default_browser_onboarding.go_to_settings_pressed
            category: "default_browser_onboarding",
            name: "go_to_settings_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum App {
        /// Counts the number of times the app is opened from an external
        /// link, implying the client has Firefox set as a default browser.
        /// 
        /// Currently this is our most accurate way of measuring how
        /// often Firefox is set as the default browser.
        static let openedAsDefaultBrowser = CounterMetricType( // generated from app.opened_as_default_browser
            category: "app",
            name: "opened_as_default_browser",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum Onboarding {
        struct FinishExtra: EventExtras {
            var slideNum: Int32?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let slideNum = self.slideNum {
                    keys.append(0)
                    values.append(String(slideNum))
                }

                return (keys, values)
            }
        }

        /// The user taps starts browsing and ends the onboarding experience.
        static let finish = EventMetricType<NoExtraKeys, FinishExtra>( // generated from onboarding.finish
            category: "onboarding",
            name: "finish",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["slide_num"]
        )

        /// The number of times a user is shown the first screen, the
        /// welcome screen, from the onboarding process.
        static let welcomeScreen = CounterMetricType( // generated from onboarding.welcome_screen
            category: "onboarding",
            name: "welcome_screen",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user taps the sign up button in
        /// onboarding's first screen, the welcome screen.
        static let welcomeScreenSignUp = CounterMetricType( // generated from onboarding.welcome_screen_sign_up
            category: "onboarding",
            name: "welcome_screen_sign_up",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user taps on the Sign In button in
        /// onboarding's first screen, the welcome screen.
        static let welcomeScreenSignIn = CounterMetricType( // generated from onboarding.welcome_screen_sign_in
            category: "onboarding",
            name: "welcome_screen_sign_in",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user taps on the next button in
        /// onboarding's first screen, the welcome screen.
        static let welcomeScreenNext = CounterMetricType( // generated from onboarding.welcome_screen_next
            category: "onboarding",
            name: "welcome_screen_next",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user taps on the close button in
        /// onboarding's first screen, the welcome screen.
        static let welcomeScreenClose = CounterMetricType( // generated from onboarding.welcome_screen_close
            category: "onboarding",
            name: "welcome_screen_close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user is shown the second screen, the
        /// Sync Screen, from the onboarding process.
        static let syncScreen = CounterMetricType( // generated from onboarding.sync_screen
            category: "onboarding",
            name: "sync_screen",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user taps on the sign up button in
        /// onboarding's second screen, the Sync Screen.
        static let syncScreenSignUp = CounterMetricType( // generated from onboarding.sync_screen_sign_up
            category: "onboarding",
            name: "sync_screen_sign_up",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user taps on the start browsing button
        /// in onboarding's second screen, the Sync Screen.
        static let syncScreenBrowse = CounterMetricType( // generated from onboarding.sync_screen_browse
            category: "onboarding",
            name: "sync_screen_browse",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum TopSite {
        struct TilePressedExtra: EventExtras {
            var position: String?
            var tileType: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let position = self.position {
                    keys.append(0)
                    values.append(String(position))
                }
                if let tileType = self.tileType {
                    keys.append(1)
                    values.append(String(tileType))
                }

                return (keys, values)
            }
        }

        /// Records an event when user taps on top site tile.
        static let tilePressed = EventMetricType<NoExtraKeys, TilePressedExtra>( // generated from top_site.tile_pressed
            category: "top_site",
            name: "tile_pressed",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["position", "tile_type"]
        )

        private static let pressedTileOriginLabel = CounterMetricType( // generated from top_site.pressed_tile_origin
            category: "top_site",
            name: "pressed_tile_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Records an event when user taps on top site tile,
        /// with a home page origin.
        static let pressedTileOrigin = try! LabeledMetricType<CounterMetricType>( // generated from top_site.pressed_tile_origin
            category: "top_site",
            name: "pressed_tile_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: pressedTileOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

    }

    enum FirefoxHomePage {
        struct RecentlySavedBookmarkViewExtra: EventExtras {
            var bookmarkCount: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let bookmarkCount = self.bookmarkCount {
                    keys.append(0)
                    values.append(String(bookmarkCount))
                }

                return (keys, values)
            }
        }

        struct ReadingListViewExtra: EventExtras {
            var readingListCount: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let readingListCount = self.readingListCount {
                    keys.append(0)
                    values.append(String(readingListCount))
                }

                return (keys, values)
            }
        }

        private static let yourLibraryLabel = CounterMetricType( // generated from firefox_home_page.your_library
            category: "firefox_home_page",
            name: "your_library",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times the user taps the Bookmarks,
        /// History, Reading List, or Downloads buttons
        static let yourLibrary = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.your_library
            category: "firefox_home_page",
            name: "your_library",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: yourLibraryLabel,
            labels: ["bookmarks-panel", "downloads-panel", "history-panel", "reading-list-panel"]
        )

        /// Counts when user opens Firefox Home from
        /// bottom right hamburger menu Home button
        /// and New Tab button.
        static let openFromMenuHomeButton = CounterMetricType( // generated from firefox_home_page.open_from_menu_home_button
            category: "firefox_home_page",
            name: "open_from_menu_home_button",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts when a user opens Firefox Home
        /// from awesomebar.
        static let openFromAwesomebar = CounterMetricType( // generated from firefox_home_page.open_from_awesomebar
            category: "firefox_home_page",
            name: "open_from_awesomebar",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps the Show All
        /// button of the Recently Saved Section
        static let recentlySavedShowAll = CounterMetricType( // generated from firefox_home_page.recently_saved_show_all
            category: "firefox_home_page",
            name: "recently_saved_show_all",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let recentlySavedShowAllOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_show_all_origin
            category: "firefox_home_page",
            name: "recently_saved_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps the Show All
        /// button of the Recently Saved Section,
        /// with a home page origin.
        static let recentlySavedShowAllOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_show_all_origin
            category: "firefox_home_page",
            name: "recently_saved_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: recentlySavedShowAllOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a bookmarked item in
        /// the Recently Saved section is tapped
        static let recentlySavedBookmarkItem = CounterMetricType( // generated from firefox_home_page.recently_saved_bookmark_item
            category: "firefox_home_page",
            name: "recently_saved_bookmark_item",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let recentlySavedBookmarkOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_bookmark_origin
            category: "firefox_home_page",
            name: "recently_saved_bookmark_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a bookmarked item in
        /// the Recently Saved section is tapped,
        /// with a home page origin.
        static let recentlySavedBookmarkOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_bookmark_origin
            category: "firefox_home_page",
            name: "recently_saved_bookmark_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: recentlySavedBookmarkOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of bookmarked items appearing
        /// in the Recently Saved section on the home page.
        static let recentlySavedBookmarkView = EventMetricType<NoExtraKeys, RecentlySavedBookmarkViewExtra>( // generated from firefox_home_page.recently_saved_bookmark_view
            category: "firefox_home_page",
            name: "recently_saved_bookmark_view",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["bookmark_count"]
        )

        /// Counts the number of reading list items
        /// appearing in the Recently Saved section
        /// on the Firefox home page.
        static let readingListView = EventMetricType<NoExtraKeys, ReadingListViewExtra>( // generated from firefox_home_page.reading_list_view
            category: "firefox_home_page",
            name: "reading_list_view",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["reading_list_count"]
        )

        /// Counts the number of times a reading list
        /// item in the Recently Saved section is tapped.
        static let recentlySavedReadingItem = CounterMetricType( // generated from firefox_home_page.recently_saved_reading_item
            category: "firefox_home_page",
            name: "recently_saved_reading_item",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let recentlySavedReadOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_read_origin
            category: "firefox_home_page",
            name: "recently_saved_read_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a reading list
        /// item in the Recently Saved section is tapped,
        /// with a home page origin.
        static let recentlySavedReadOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_read_origin
            category: "firefox_home_page",
            name: "recently_saved_read_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: recentlySavedReadOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps the
        /// Show All button in the Jump Back In section.
        static let jumpBackInShowAll = CounterMetricType( // generated from firefox_home_page.jump_back_in_show_all
            category: "firefox_home_page",
            name: "jump_back_in_show_all",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let jumpBackInShowAllOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_show_all_origin
            category: "firefox_home_page",
            name: "jump_back_in_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps the
        /// Show All button in the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInShowAllOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_show_all_origin
            category: "firefox_home_page",
            name: "jump_back_in_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: jumpBackInShowAllOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user sees the
        /// Jump Back In section on the homepage
        static let jumpBackInSectionView = CounterMetricType( // generated from firefox_home_page.jump_back_in_section_view
            category: "firefox_home_page",
            name: "jump_back_in_section_view",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps to open an
        /// existing tab from the Jump Back In section
        static let jumpBackInTabOpened = CounterMetricType( // generated from firefox_home_page.jump_back_in_tab_opened
            category: "firefox_home_page",
            name: "jump_back_in_tab_opened",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let jumpBackInTabOpenedOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_tab_opened_origin
            category: "firefox_home_page",
            name: "jump_back_in_tab_opened_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps to open an
        /// existing tab from the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInTabOpenedOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_tab_opened_origin
            category: "firefox_home_page",
            name: "jump_back_in_tab_opened_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: jumpBackInTabOpenedOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps to open an
        /// existing group from the Jump Back In section
        static let jumpBackInGroupOpened = CounterMetricType( // generated from firefox_home_page.jump_back_in_group_opened
            category: "firefox_home_page",
            name: "jump_back_in_group_opened",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let jumpBackInGroupOpenOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_group_open_origin
            category: "firefox_home_page",
            name: "jump_back_in_group_open_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps to open an
        /// existing group from the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInGroupOpenOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_group_open_origin
            category: "firefox_home_page",
            name: "jump_back_in_group_open_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: jumpBackInGroupOpenOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps to open the
        /// settings menu to customize the Firefox Homepage
        static let customizeHomepageButton = CounterMetricType( // generated from firefox_home_page.customize_homepage_button
            category: "firefox_home_page",
            name: "customize_homepage_button",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user sees the Firefox Homepage
        static let firefoxHomepageView = CounterMetricType( // generated from firefox_home_page.firefox_homepage_view
            category: "firefox_home_page",
            name: "firefox_homepage_view",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let firefoxHomepageOriginLabel = CounterMetricType( // generated from firefox_home_page.firefox_homepage_origin
            category: "firefox_home_page",
            name: "firefox_homepage_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The number of times a user sees the Firefox Homepage,
        /// with a home page origin.
        static let firefoxHomepageOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.firefox_homepage_origin
            category: "firefox_home_page",
            name: "firefox_homepage_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: firefoxHomepageOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps the
        /// Show All button in the History section
        static let historyHighlightsShowAll = CounterMetricType( // generated from firefox_home_page.history_highlights_show_all
            category: "firefox_home_page",
            name: "history_highlights_show_all",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user sees the
        /// History Highlights section on the homepage
        static let historyHighlightsView = CounterMetricType( // generated from firefox_home_page.history_highlights_view
            category: "firefox_home_page",
            name: "history_highlights_view",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps to open an
        /// existing tab from the History Highlights section
        static let historyHighlightsItemOpened = CounterMetricType( // generated from firefox_home_page.history_highlights_item_opened
            category: "firefox_home_page",
            name: "history_highlights_item_opened",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum Library {
        private static let panelPressedLabel = CounterMetricType( // generated from library.panel_pressed
            category: "library",
            name: "panel_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a specific library panel
        /// button is tapped for Bookmarks, History, Reading List,
        /// Downloads and Synced tabs
        static let panelPressed = try! LabeledMetricType<CounterMetricType>( // generated from library.panel_pressed
            category: "library",
            name: "panel_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: panelPressedLabel,
            labels: ["bookmarks-panel", "downloads-panel", "history-panel", "reading-panel", "sync-panel"]
        )

    }

    enum LegacyIds {
        /// The client id from legacy telemetry.
        static let clientId = UuidMetricType( // generated from legacy.ids.client_id
            category: "legacy.ids",
            name: "client_id",
            sendInPings: ["deletion-request", "metrics"],
            lifetime: .user,
            disabled: false
        )

    }

    enum Deletion {
        /// The FxA device id.
        static let syncDeviceId = StringMetricType( // generated from deletion.sync_device_id
            category: "deletion",
            name: "sync_device_id",
            sendInPings: ["deletion-request"],
            lifetime: .user,
            disabled: false
        )

    }

    enum PageActionMenu {
        /// Counts the number of times a user taps Share Page With in the
        /// page action menu
        static let sharePageWith = CounterMetricType( // generated from page_action_menu.share_page_with
            category: "page_action_menu",
            name: "share_page_with",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Add to Reading List
        /// in the page action menu
        static let addToReadingList = CounterMetricType( // generated from page_action_menu.add_to_reading_list
            category: "page_action_menu",
            name: "add_to_reading_list",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Send to Device
        /// in the page action menu
        static let sendToDevice = CounterMetricType( // generated from page_action_menu.send_to_device
            category: "page_action_menu",
            name: "send_to_device",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Copy Address
        /// in the page action menu
        static let copyAddress = CounterMetricType( // generated from page_action_menu.copy_address
            category: "page_action_menu",
            name: "copy_address",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Report Site Issue
        /// in the page action menu
        static let reportSiteIssue = CounterMetricType( // generated from page_action_menu.report_site_issue
            category: "page_action_menu",
            name: "report_site_issue",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Find in Page
        /// in the page action menu
        static let findInPage = CounterMetricType( // generated from page_action_menu.find_in_page
            category: "page_action_menu",
            name: "find_in_page",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Request Desktop Site
        /// in the page action menu
        static let requestDesktopSite = CounterMetricType( // generated from page_action_menu.request_desktop_site
            category: "page_action_menu",
            name: "request_desktop_site",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Request Mobile Site
        /// in the page action menu
        static let requestMobileSite = CounterMetricType( // generated from page_action_menu.request_mobile_site
            category: "page_action_menu",
            name: "request_mobile_site",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Pin to Top Sites
        /// in the page action menu
        static let pinToTopSites = CounterMetricType( // generated from page_action_menu.pin_to_top_sites
            category: "page_action_menu",
            name: "pin_to_top_sites",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps Pin to Top Sites
        /// in the page action menu
        static let removePinnedSite = CounterMetricType( // generated from page_action_menu.remove_pinned_site
            category: "page_action_menu",
            name: "remove_pinned_site",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum Pocket {
        private static let openStoryPositionLabel = CounterMetricType( // generated from pocket.open_story_position
            category: "pocket",
            name: "open_story_position",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts when a user opens Pocket article from
        /// Firefox Home Pocket feed.
        /// The label is position of tile i.e. 0,1,2...
        static let openStoryPosition = try! LabeledMetricType<CounterMetricType>( // generated from pocket.open_story_position
            category: "pocket",
            name: "open_story_position",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: openStoryPositionLabel,
            labels: nil
        )

        /// Counts when a user gets to pocket section
        /// on Firefox Home
        static let sectionImpressions = CounterMetricType( // generated from pocket.section_impressions
            category: "pocket",
            name: "section_impressions",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let openStoryOriginLabel = CounterMetricType( // generated from pocket.open_story_origin
            category: "pocket",
            name: "open_story_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Records when a user opens Pocket article from
        /// Firefox Home Pocket feed, with a home page origin.
        static let openStoryOrigin = try! LabeledMetricType<CounterMetricType>( // generated from pocket.open_story_origin
            category: "pocket",
            name: "open_story_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: openStoryOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

    }

    enum Preferences {
        struct ChangedExtra: EventExtras {
            var changedTo: String?
            var preference: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let changedTo = self.changedTo {
                    keys.append(0)
                    values.append(String(changedTo))
                }
                if let preference = self.preference {
                    keys.append(1)
                    values.append(String(preference))
                }

                return (keys, values)
            }
        }

        /// Recorded when a preference is changed and includes the
        /// preference that changed as well as the value changed to
        /// recorded in the extra keys.
        static let changed = EventMetricType<NoExtraKeys, ChangedExtra>( // generated from preferences.changed
            category: "preferences",
            name: "changed",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["changed_to", "preference"]
        )

        /// The name of the view that the user wants to see on new tabs.
        /// For example History, Homepage or Blank. It is used to measure
        /// usage of this feature, to see how effective feature promotion
        /// campaigns are and to establish a baseline number for when we
        /// introduce the new Activity Stream features.
        static let newTabExperience = StringMetricType( // generated from preferences.new_tab_experience
            category: "preferences",
            name: "new_tab_experience",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The setting a user chooses as their Home page. By default,
        /// it is initially set to Firefox Home.
        static let homePageSetting = StringMetricType( // generated from preferences.home_page_setting
            category: "preferences",
            name: "home_page_setting",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Measures the state of the "Save Logins" preference.
        static let saveLogins = BooleanMetricType( // generated from preferences.save_logins
            category: "preferences",
            name: "save_logins",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Measures the state of the "Show Clipboard Bar" preference.
        static let showClipboardBar = BooleanMetricType( // generated from preferences.show_clipboard_bar
            category: "preferences",
            name: "show_clipboard_bar",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Measures the state of the "Close Private Tabs" preference.
        static let closePrivateTabs = BooleanMetricType( // generated from preferences.close_private_tabs
            category: "preferences",
            name: "close_private_tabs",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum QrCode {
        /// Counts the number of times a QR code is scanned.
        static let scanned = CounterMetricType( // generated from qr_code.scanned
            category: "qr_code",
            name: "scanned",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum ReadingList {
        private static let addLabel = CounterMetricType( // generated from reading_list.add
            category: "reading_list",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times an item is added to the reading
        /// list from the following:
        /// * Reader Mode Toolbar
        /// * Share Extension
        /// * Page Action Menu
        static let add = try! LabeledMetricType<CounterMetricType>( // generated from reading_list.add
            category: "reading_list",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: addLabel,
            labels: ["page-action-menu", "reader-mode-toolbar", "share-extension"]
        )

        /// Counts the number of times an item is opened from the
        /// Reading List
        static let open = CounterMetricType( // generated from reading_list.open
            category: "reading_list",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let deleteLabel = CounterMetricType( // generated from reading_list.delete
            category: "reading_list",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times an item is added to the
        /// reading list from the following:
        /// * Reader Mode Toolbar
        /// * Reading List Panel
        static let delete = try! LabeledMetricType<CounterMetricType>( // generated from reading_list.delete
            category: "reading_list",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: deleteLabel,
            labels: ["reader-mode-toolbar", "reading-list-panel"]
        )

    }

    enum ReaderMode {
        /// Counts how many times the reader mode is opened.
        static let open = CounterMetricType( // generated from reader_mode.open
            category: "reader_mode",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts how many times the reader mode is closed.
        static let close = CounterMetricType( // generated from reader_mode.close
            category: "reader_mode",
            name: "close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum SettingsMenu {
        /// Counts the number of times setting as default
        /// browser menu option is tapped.
        static let setAsDefaultBrowserPressed = CounterMetricType( // generated from settings_menu.set_as_default_browser_pressed
            category: "settings_menu",
            name: "set_as_default_browser_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum Search {
        private static let countsLabel = CounterMetricType( // generated from search.counts
            category: "search",
            name: "counts",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The labels for this counter are `{search-engine-name}.{source}`
        /// 
        /// If the search engine is bundled with Firefox-iOS, then
        /// `search-engine-name` will be the name of the search engine. If
        /// it is a custom search engine, the value will be `custom`.
        /// 
        /// The value of `source` will reflect the source from which the
        /// search started.  One of:
        /// * quicksearch
        /// * suggestion
        /// * actionbar
        static let counts = try! LabeledMetricType<CounterMetricType>( // generated from search.counts
            category: "search",
            name: "counts",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: countsLabel,
            labels: nil
        )

        /// The default search engine identifier if the search engine is
        /// pre-loaded with Firefox-iOS.  If it's a custom search engine,
        /// then the value will be 'custom'.
        static let defaultEngine = StringMetricType( // generated from search.default_engine
            category: "search",
            name: "default_engine",
            sendInPings: ["metrics"],
            lifetime: .application,
            disabled: true
        )

        /// Counts the number of times the start search button is
        /// pressed
        static let startSearchPressed = CounterMetricType( // generated from search.start_search_pressed
            category: "search",
            name: "start_search_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let inContentLabel = CounterMetricType( // generated from search.in_content
            category: "search",
            name: "in_content",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Records the type of interaction a user has on SERP pages.
        static let inContent = try! LabeledMetricType<CounterMetricType>( // generated from search.in_content
            category: "search",
            name: "in_content",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: inContentLabel,
            labels: nil
        )

        private static let googleTopsitePressedLabel = CounterMetricType( // generated from search.google_topsite_pressed
            category: "search",
            name: "google_topsite_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times the google top site button
        /// is pressed
        static let googleTopsitePressed = try! LabeledMetricType<CounterMetricType>( // generated from search.google_topsite_pressed
            category: "search",
            name: "google_topsite_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: googleTopsitePressedLabel,
            labels: nil
        )

    }

    enum Sync {
        /// Counts the number of times a user opens
        /// synced tab
        static let openTab = CounterMetricType( // generated from sync.open_tab
            category: "sync",
            name: "open_tab",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps
        /// on sign in to sync button in sync
        /// library view
        static let signInSyncPressed = CounterMetricType( // generated from sync.sign_in_sync_pressed
            category: "sync",
            name: "sign_in_sync_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts the number of times a user taps
        /// on create account button in sync library view
        static let createAccountPressed = CounterMetricType( // generated from sync.create_account_pressed
            category: "sync",
            name: "create_account_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum Tabs {
        struct GroupedTabExtra: EventExtras {
            var averageTabsInAllGroups: Int32?
            var groupsTwoTabsOnly: Int32?
            var groupsWithMoreThanTwoTab: Int32?
            var totalNumOfGroups: Int32?
            var totalTabsInAllGroups: Int32?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let averageTabsInAllGroups = self.averageTabsInAllGroups {
                    keys.append(0)
                    values.append(String(averageTabsInAllGroups))
                }
                if let groupsTwoTabsOnly = self.groupsTwoTabsOnly {
                    keys.append(1)
                    values.append(String(groupsTwoTabsOnly))
                }
                if let groupsWithMoreThanTwoTab = self.groupsWithMoreThanTwoTab {
                    keys.append(2)
                    values.append(String(groupsWithMoreThanTwoTab))
                }
                if let totalNumOfGroups = self.totalNumOfGroups {
                    keys.append(3)
                    values.append(String(totalNumOfGroups))
                }
                if let totalTabsInAllGroups = self.totalTabsInAllGroups {
                    keys.append(4)
                    values.append(String(totalTabsInAllGroups))
                }

                return (keys, values)
            }
        }

        /// Measures the current open tab count as the application
        /// goes to background. Each background event adds to this
        /// metric, making it the cumulative sum of all open tabs
        /// when the app goes to background during the period of
        /// time covered by a single metrics ping. This can be
        /// divided by the number of baseline pings with
        /// `ping_info.reason="inactive"` from the `start_time` to
        /// the `end_time` of the metrics ping to determine the
        /// average open tabs per foreground "session".
        static let cumulativeCount = CounterMetricType( // generated from tabs.cumulative_count
            category: "tabs",
            name: "cumulative_count",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        private static let openLabel = CounterMetricType( // generated from tabs.open
            category: "tabs",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The count of tabs opened by the user. Increments the
        /// appropriate label when either a normal or private tab
        /// is opened.
        static let open = try! LabeledMetricType<CounterMetricType>( // generated from tabs.open
            category: "tabs",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: openLabel,
            labels: ["normal-tab", "private-tab"]
        )

        private static let closeLabel = CounterMetricType( // generated from tabs.close
            category: "tabs",
            name: "close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The count of tabs closed by the user. Increments the
        /// appropriate label when either a normal or private tab
        /// is closed.
        static let close = try! LabeledMetricType<CounterMetricType>( // generated from tabs.close
            category: "tabs",
            name: "close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: closeLabel,
            labels: ["normal-tab", "private-tab"]
        )

        private static let closeAllLabel = CounterMetricType( // generated from tabs.close_all
            category: "tabs",
            name: "close_all",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// The count of times the user closes all tabs. Increments the
        /// appropriate label when either a normal or private tab
        /// is closed.
        static let closeAll = try! LabeledMetricType<CounterMetricType>( // generated from tabs.close_all
            category: "tabs",
            name: "close_all",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: closeAllLabel,
            labels: ["normal-tab", "private-tab"]
        )

        /// Counts the number of times the add new tab button is
        /// pressed
        static let newTabPressed = CounterMetricType( // generated from tabs.new_tab_pressed
            category: "tabs",
            name: "new_tab_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Recorded when a user clicks an open tab
        static let clickTab = EventMetricType<NoExtraKeys, NoExtras>( // generated from tabs.click_tab
            category: "tabs",
            name: "click_tab",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: []
        )

        /// Recorded when a user opens the tab tray
        static let openTabTray = EventMetricType<NoExtraKeys, NoExtras>( // generated from tabs.open_tab_tray
            category: "tabs",
            name: "open_tab_tray",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: []
        )

        /// Recorded when a user closes the tab tray
        static let closeTabTray = EventMetricType<NoExtraKeys, NoExtras>( // generated from tabs.close_tab_tray
            category: "tabs",
            name: "close_tab_tray",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: []
        )

        /// Record the number of times a user pulls down
        /// on a page to reload.
        static let pullToRefresh = CounterMetricType( // generated from tabs.pull_to_refresh
            category: "tabs",
            name: "pull_to_refresh",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Record the number of URI's visited by the user.
        static let normalAndPrivateUriCount = CounterMetricType( // generated from tabs.normal_and_private_uri_count
            category: "tabs",
            name: "normal_and_private_uri_count",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false
        )

        /// Recorded when a user opens the tab tray with grouped tab
        static let groupedTab = EventMetricType<NoExtraKeys, GroupedTabExtra>( // generated from tabs.grouped_tab
            category: "tabs",
            name: "grouped_tab",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["average_tabs_in_all_groups", "groups_two_tabs_only", "groups_with_more_than_two_tab", "total_num_of_groups", "total_tabs_in_all_groups"]
        )

        /// Recorded when a user closes the tab in a group
        static let groupedTabClosed = CounterMetricType( // generated from tabs.grouped_tab_closed
            category: "tabs",
            name: "grouped_tab_closed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// This counts the number of times a user has tapped the search
        /// icon for grouped tabs in the tab tray.
        static let groupedTabSearch = CounterMetricType( // generated from tabs.grouped_tab_search
            category: "tabs",
            name: "grouped_tab_search",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// This counts the number of times a user taps the back
        /// button on a tab's toolbar.
        static let navigateTabHistoryBack = CounterMetricType( // generated from tabs.navigate_tab_history_back
            category: "tabs",
            name: "navigate_tab_history_back",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// This counts the number of times a user navigates back in tab
        /// history by swiping from the left edge of the device to the right.
        static let navigateTabBackSwipe = CounterMetricType( // generated from tabs.navigate_tab_back_swipe
            category: "tabs",
            name: "navigate_tab_back_swipe",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// This counts the number of times a user taps the forward
        /// button on a tab's toolbar.
        static let navigateTabHistoryForward = CounterMetricType( // generated from tabs.navigate_tab_history_forward
            category: "tabs",
            name: "navigate_tab_history_forward",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// This counts the number of times a user taps the reload
        /// button in the URL bar.
        static let reloadFromUrlBar = CounterMetricType( // generated from tabs.reload_from_url_bar
            category: "tabs",
            name: "reload_from_url_bar",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum Theme {
        /// Measures the state of the "Use System Light/Dark Mode"
        /// theme preference.
        static let useSystemTheme = BooleanMetricType( // generated from theme.use_system_theme
            category: "theme",
            name: "use_system_theme",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum TrackingProtection {
        /// Measures the state of the tracking-protection enabled
        /// preference.
        static let enabled = BooleanMetricType( // generated from tracking_protection.enabled
            category: "tracking_protection",
            name: "enabled",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// A string representing the selected strength of the
        /// tracking-protection that is enabled. One of:
        /// * basic
        /// * strict
        static let strength = StringMetricType( // generated from tracking_protection.strength
            category: "tracking_protection",
            name: "strength",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum Widget {
        /// Counts how many times the medium tabs widget opens url
        static let mTabsOpenUrl = CounterMetricType( // generated from widget.m_tabs_open_url
            category: "widget",
            name: "m_tabs_open_url",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts how many times the large tabs widget opens url
        static let lTabsOpenUrl = CounterMetricType( // generated from widget.l_tabs_open_url
            category: "widget",
            name: "l_tabs_open_url",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts how many times small quick action
        /// widget opens firefox for regular search
        static let sQuickActionSearch = CounterMetricType( // generated from widget.s_quick_action_search
            category: "widget",
            name: "s_quick_action_search",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts how many times medium quick action
        /// widget opens firefox for regular search
        static let mQuickActionSearch = CounterMetricType( // generated from widget.m_quick_action_search
            category: "widget",
            name: "m_quick_action_search",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts how many times medium quick action
        /// widget opens firefox for private search
        static let mQuickActionPrivateSearch = CounterMetricType( // generated from widget.m_quick_action_private_search
            category: "widget",
            name: "m_quick_action_private_search",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts how many times medium quick action
        /// widget opens copied links
        static let mQuickActionCopiedLink = CounterMetricType( // generated from widget.m_quick_action_copied_link
            category: "widget",
            name: "m_quick_action_copied_link",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts how many times medium quick action
        /// widget closes private tabs
        static let mQuickActionClosePrivate = CounterMetricType( // generated from widget.m_quick_action_close_private
            category: "widget",
            name: "m_quick_action_close_private",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Counts how many times user opens top site tabs
        static let mTopSitesWidget = CounterMetricType( // generated from widget.m_top_sites_widget
            category: "widget",
            name: "m_top_sites_widget",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum WallpaperAnalytics {
        struct ToggleLogoWallpaperButtonExtra: EventExtras {
            var changedTo: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let changedTo = self.changedTo {
                    keys.append(0)
                    values.append(String(changedTo))
                }

                return (keys, values)
            }
        }

        struct CycleWallpaperButtonExtra: EventExtras {
            var wallpaperName: String?
            var wallpaperType: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let wallpaperName = self.wallpaperName {
                    keys.append(0)
                    values.append(String(wallpaperName))
                }
                if let wallpaperType = self.wallpaperType {
                    keys.append(1)
                    values.append(String(wallpaperType))
                }

                return (keys, values)
            }
        }

        struct WallpaperSelectedExtra: EventExtras {
            var wallpaperName: String?
            var wallpaperType: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let wallpaperName = self.wallpaperName {
                    keys.append(0)
                    values.append(String(wallpaperName))
                }
                if let wallpaperType = self.wallpaperType {
                    keys.append(1)
                    values.append(String(wallpaperType))
                }

                return (keys, values)
            }
        }

        /// Recorded when user toggles the button which enables
        /// or disables the ability to toggle wallpapers on the
        /// homepage from the logo.
        static let toggleLogoWallpaperButton = EventMetricType<NoExtraKeys, ToggleLogoWallpaperButtonExtra>( // generated from wallpaper_analytics.toggle_logo_wallpaper_button
            category: "wallpaper_analytics",
            name: "toggle_logo_wallpaper_button",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["changed_to"]
        )

        /// Recorded when user taps the Fx logo on the homepage,
        /// thus changing the wallpaper. Wallpaper information
        /// is sent in the extra keys.
        static let cycleWallpaperButton = EventMetricType<NoExtraKeys, CycleWallpaperButtonExtra>( // generated from wallpaper_analytics.cycle_wallpaper_button
            category: "wallpaper_analytics",
            name: "cycle_wallpaper_button",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["wallpaper_name", "wallpaper_type"]
        )

        /// Recorded when the user selects a wallpaper from
        /// the wallpaper settings screen. Wallpaper information
        /// is sent in the extra keys.
        static let wallpaperSelected = EventMetricType<NoExtraKeys, WallpaperSelectedExtra>( // generated from wallpaper_analytics.wallpaper_selected
            category: "wallpaper_analytics",
            name: "wallpaper_selected",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["wallpaper_name", "wallpaper_type"]
        )

    }

    enum CfrAnalytics {
        struct DismissCfrFromButtonExtra: EventExtras {
            var hintType: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let hintType = self.hintType {
                    keys.append(0)
                    values.append(String(hintType))
                }

                return (keys, values)
            }
        }

        struct DismissCfrFromOutsideTapExtra: EventExtras {
            var hintType: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let hintType = self.hintType {
                    keys.append(0)
                    values.append(String(hintType))
                }

                return (keys, values)
            }
        }

        struct PressCfrActionButtonExtra: EventExtras {
            var hintType: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let hintType = self.hintType {
                    keys.append(0)
                    values.append(String(hintType))
                }

                return (keys, values)
            }
        }

        /// Recorded when the user dismisses a CFR by tapping
        /// the close button in the CFR. Hint type is sent
        /// in the extra keys.
        static let dismissCfrFromButton = EventMetricType<NoExtraKeys, DismissCfrFromButtonExtra>( // generated from cfr_analytics.dismiss_cfr_from_button
            category: "cfr_analytics",
            name: "dismiss_cfr_from_button",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["hint_type"]
        )

        /// Recorded when the user dismisses a CFR by tapping
        /// outside the CFR. Hint type is sent in the extra keys.
        static let dismissCfrFromOutsideTap = EventMetricType<NoExtraKeys, DismissCfrFromOutsideTapExtra>( // generated from cfr_analytics.dismiss_cfr_from_outside_tap
            category: "cfr_analytics",
            name: "dismiss_cfr_from_outside_tap",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["hint_type"]
        )

        /// Recorded when the user taps CFR's action button.
        /// Hint type is sent in the extra keys.
        static let pressCfrActionButton = EventMetricType<NoExtraKeys, PressCfrActionButtonExtra>( // generated from cfr_analytics.press_cfr_action_button
            category: "cfr_analytics",
            name: "press_cfr_action_button",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["hint_type"]
        )

    }

    enum InactiveTabsTray {
        struct ToggleInactiveTabTrayExtra: EventExtras {
            var toggleType: String?

            func toFfiExtra() -> ([Int32], [String]) {
                var keys = [Int32]()
                var values = [String]()

                if let toggleType = self.toggleType {
                    keys.append(0)
                    values.append(String(toggleType))
                }

                return (keys, values)
            }
        }

        /// Counts the number of times user toggle (expand or collapse)
        /// inactive tab section.
        static let toggleInactiveTabTray = EventMetricType<NoExtraKeys, ToggleInactiveTabTrayExtra>( // generated from inactive_tabs_tray.toggle_inactive_tab_tray
            category: "inactive_tabs_tray",
            name: "toggle_inactive_tab_tray",
            sendInPings: ["events"],
            lifetime: .ping,
            disabled: true,
            allowedExtraKeys: ["toggle_type"]
        )

        /// Recorded when a user taps on an inactive tab
        static let openInactiveTab = CounterMetricType( // generated from inactive_tabs_tray.open_inactive_tab
            category: "inactive_tabs_tray",
            name: "open_inactive_tab",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Recorded when a user taps on close all inactive tabs button
        static let inactiveTabsCloseAllBtn = CounterMetricType( // generated from inactive_tabs_tray.inactive_tabs_close_all_btn
            category: "inactive_tabs_tray",
            name: "inactive_tabs_close_all_btn",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Recorded when a user swipes to close an inactive tab
        static let inactiveTabSwipeClose = CounterMetricType( // generated from inactive_tabs_tray.inactive_tab_swipe_close
            category: "inactive_tabs_tray",
            name: "inactive_tab_swipe_close",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Recorded when a user is shown inactive tab view
        static let inactiveTabShown = CounterMetricType( // generated from inactive_tabs_tray.inactive_tab_shown
            category: "inactive_tabs_tray",
            name: "inactive_tab_shown",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

    }

    enum BrowserSearch {
        private static let withAdsLabel = CounterMetricType( // generated from browser_search.with_ads
            category: "browser_search",
            name: "with_ads",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Records counts of SERP pages with adverts displayed.
        /// The key format is ‘<provider-name>’.
        static let withAds = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.with_ads
            category: "browser_search",
            name: "with_ads",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: withAdsLabel,
            labels: nil
        )

        private static let adClicksLabel = CounterMetricType( // generated from browser_search.ad_clicks
            category: "browser_search",
            name: "ad_clicks",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true
        )

        /// Records clicks of adverts on SERP pages.
        /// The key format is ‘<provider-name>’.
        static let adClicks = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.ad_clicks
            category: "browser_search",
            name: "ad_clicks",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: adClicksLabel,
            labels: nil
        )

    }

    enum InstalledMozillaProducts {
        /// If Klar is installed on the users's device.
        static let klar = BooleanMetricType( // generated from installed_mozilla_products.klar
            category: "installed_mozilla_products",
            name: "klar",
            sendInPings: ["metrics"],
            lifetime: .application,
            disabled: true
        )

        /// If Focus is installed on the users's device.
        static let focus = BooleanMetricType( // generated from installed_mozilla_products.focus
            category: "installed_mozilla_products",
            name: "focus",
            sendInPings: ["metrics"],
            lifetime: .application,
            disabled: true
        )

    }

    enum Device {
        /// True if the device support device owner authentication
        /// with either biometrics or a passcode.
        static let authentication = BooleanMetricType( // generated from device.authentication
            category: "device",
            name: "authentication",
            sendInPings: ["metrics"],
            lifetime: .application,
            disabled: true
        )

    }

}
